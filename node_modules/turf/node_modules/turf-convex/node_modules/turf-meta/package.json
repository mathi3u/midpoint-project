{
  "name": "turf-meta",
  "version": "1.0.2",
  "description": "meta and functional programming helpers for turf modules",
  "main": "index.js",
  "scripts": {
    "test": "tape test.js",
    "doc": "dox < index.js | doxme"
  },
  "keywords": [
    "functional",
    "programming",
    "turfjs"
  ],
  "author": {
    "name": "Tom MacWright"
  },
  "license": "ISC",
  "devDependencies": {
    "dox": "^0.6.1",
    "doxme": "^1.0.0",
    "tape": "^3.4.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:Turfjs/turf-meta.git"
  },
  "readme": "# turf-meta\n\n[![build status](https://secure.travis-ci.org/Turfjs/turf-meta.png)](http://travis-ci.org/Turfjs/turf-meta)\n\nFunctional helpers for Turf modules.\n\n**Why?** Because many turf modules have a similar pattern of running some operation\nover every coordinate or property object, etc. This module unifies those patterns\ninto one structure and make sure that turf is able to handle unusual structures\n(geometry roots, null geometries, geometrycollections, and so on). It's also\nquite fast - it uses monomorphic functions as much as possible and avoids copying\ndata unnecessarily.\n\n## coordEach(layer, callback)\n\nLazily iterate over coordinates in any GeoJSON object, similar to Array.forEach.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (value)\n\n```js\nvar point = { type: 'Point', coordinates: [0, 0] };\ncoordEach(point, function(coords) {\n  // coords is equal to [0, 0]\n});\n```\n\n## coordReduce(layer, callback, memo)\n\nLazily reduce coordinates in any GeoJSON object into a single value, similar to how Array.reduce works. However, in this case we lazily runthe reduction, so an array of all coordinates is unnecessary.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (memo, value) and returns a new memo\n* `memo` (``): the starting value of memo: can be any type.\n\n## propEach(layer, callback)\n\nLazily iterate over property objects in any GeoJSON object, similar to Array.forEach.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (value)\n\n```js\nvar point = { type: 'Feature', geometry: null, properties: { foo: 1 } };\npropEach(point, function(props) {\n  // props is equal to { foo: 1}\n});\n```\n\n\n## propReduce(layer, callback, memo)\n\nLazily reduce properties in any GeoJSON object into a single value, similar to how Array.reduce works. However, in this case we lazily runthe reduction, so an array of all properties is unnecessary.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (memo, coord) and returns a new memo\n* `memo` (``): the starting value of memo: can be any type.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Turfjs/turf-meta/issues"
  },
  "_id": "turf-meta@1.0.2",
  "_from": "turf-meta@1.0.2"
}
